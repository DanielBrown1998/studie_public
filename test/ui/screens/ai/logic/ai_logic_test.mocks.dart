// Mocks generated by Mockito 5.4.6 from annotations
// in app/test/ui/screens/timer/logic/timer_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:app/source/service/firebase/ai_service.dart' as _i2;
import 'package:app/ui/screens/ai/logic/ai_logic.dart' as _i5;
import 'package:app/utils/connect/connection.dart' as _i6;
import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:get/get.dart' as _i3;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAIService_0 extends _i1.SmartFake implements _i2.AIService {
  _FakeAIService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRx_1<T> extends _i1.SmartFake implements _i3.Rx<T> {
  _FakeRx_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxBool_3 extends _i1.SmartFake implements _i3.RxBool {
  _FakeRxBool_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxStatus_4 extends _i1.SmartFake implements _i3.RxStatus {
  _FakeRxStatus_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternalFinalCallback_5<T> extends _i1.SmartFake
    implements _i3.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIService extends _i1.Mock implements _i2.AIService {
  @override
  _i4.Future<Map<String, dynamic>?> generateStudyPlan(
    String? exame,
    String? timeStartStudy,
    String? timeEndStudy,
    String? firstTimeStudyInterval,
    String? secondTimeStudyInterval,
    String? thirtTimeStudyInterval,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateStudyPlan, [
              exame,
              timeStartStudy,
              timeEndStudy,
              firstTimeStudyInterval,
              secondTimeStudyInterval,
              thirtTimeStudyInterval,
            ]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
            returnValueForMissingStub:
                _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);
}

/// A class which mocks [AiLogic].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiLogic extends _i1.Mock implements _i5.AiLogic {
  @override
  _i2.AIService get aiService =>
      (super.noSuchMethod(
            Invocation.getter(#aiService),
            returnValue: _FakeAIService_0(this, Invocation.getter(#aiService)),
            returnValueForMissingStub: _FakeAIService_0(
              this,
              Invocation.getter(#aiService),
            ),
          )
          as _i2.AIService);

  @override
  _i3.Rx<_i6.Connection> get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeRx_1<_i6.Connection>(
              this,
              Invocation.getter(#connection),
            ),
            returnValueForMissingStub: _FakeRx_1<_i6.Connection>(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i3.Rx<_i6.Connection>);

  @override
  _i4.StreamSubscription<List<_i7.ConnectivityResult>> get streamSubscription =>
      (super.noSuchMethod(
            Invocation.getter(#streamSubscription),
            returnValue:
                _FakeStreamSubscription_2<List<_i7.ConnectivityResult>>(
                  this,
                  Invocation.getter(#streamSubscription),
                ),
            returnValueForMissingStub:
                _FakeStreamSubscription_2<List<_i7.ConnectivityResult>>(
                  this,
                  Invocation.getter(#streamSubscription),
                ),
          )
          as _i4.StreamSubscription<List<_i7.ConnectivityResult>>);

  @override
  _i3.RxBool get aiIsThinking =>
      (super.noSuchMethod(
            Invocation.getter(#aiIsThinking),
            returnValue: _FakeRxBool_3(this, Invocation.getter(#aiIsThinking)),
            returnValueForMissingStub: _FakeRxBool_3(
              this,
              Invocation.getter(#aiIsThinking),
            ),
          )
          as _i3.RxBool);

  @override
  _i3.RxStatus get loadingConnect =>
      (super.noSuchMethod(
            Invocation.getter(#loadingConnect),
            returnValue: _FakeRxStatus_4(
              this,
              Invocation.getter(#loadingConnect),
            ),
            returnValueForMissingStub: _FakeRxStatus_4(
              this,
              Invocation.getter(#loadingConnect),
            ),
          )
          as _i3.RxStatus);

  @override
  _i3.RxStatus get successConnect =>
      (super.noSuchMethod(
            Invocation.getter(#successConnect),
            returnValue: _FakeRxStatus_4(
              this,
              Invocation.getter(#successConnect),
            ),
            returnValueForMissingStub: _FakeRxStatus_4(
              this,
              Invocation.getter(#successConnect),
            ),
          )
          as _i3.RxStatus);

  @override
  _i3.RxStatus get errorConnect =>
      (super.noSuchMethod(
            Invocation.getter(#errorConnect),
            returnValue: _FakeRxStatus_4(
              this,
              Invocation.getter(#errorConnect),
            ),
            returnValueForMissingStub: _FakeRxStatus_4(
              this,
              Invocation.getter(#errorConnect),
            ),
          )
          as _i3.RxStatus);

  @override
  _i3.RxStatus get empty =>
      (super.noSuchMethod(
            Invocation.getter(#empty),
            returnValue: _FakeRxStatus_4(this, Invocation.getter(#empty)),
            returnValueForMissingStub: _FakeRxStatus_4(
              this,
              Invocation.getter(#empty),
            ),
          )
          as _i3.RxStatus);

  @override
  set streamSubscription(
    _i4.StreamSubscription<List<_i7.ConnectivityResult>>? value,
  ) => super.noSuchMethod(
    Invocation.setter(#streamSubscription, value),
    returnValueForMissingStub: null,
  );

  @override
  set aiIsThinking(_i3.RxBool? value) => super.noSuchMethod(
    Invocation.setter(#aiIsThinking, value),
    returnValueForMissingStub: null,
  );

  @override
  set loadingConnect(_i3.RxStatus? value) => super.noSuchMethod(
    Invocation.setter(#loadingConnect, value),
    returnValueForMissingStub: null,
  );

  @override
  set successConnect(_i3.RxStatus? value) => super.noSuchMethod(
    Invocation.setter(#successConnect, value),
    returnValueForMissingStub: null,
  );

  @override
  set errorConnect(_i3.RxStatus? value) => super.noSuchMethod(
    Invocation.setter(#errorConnect, value),
    returnValueForMissingStub: null,
  );

  @override
  set empty(_i3.RxStatus? value) => super.noSuchMethod(
    Invocation.setter(#empty, value),
    returnValueForMissingStub: null,
  );

  @override
  _i3.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onStart),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i3.InternalFinalCallback<void>);

  @override
  _i3.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onDelete),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i3.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(
            Invocation.getter(#initialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get listeners =>
      (super.noSuchMethod(
            Invocation.getter(#listeners),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  _i3.RxStatus get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _FakeRxStatus_4(this, Invocation.getter(#status)),
            returnValueForMissingStub: _FakeRxStatus_4(
              this,
              Invocation.getter(#status),
            ),
          )
          as _i3.RxStatus);

  @override
  set value(List<_i7.ConnectivityResult>? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<Map<String, dynamic>?> generateStudyPlan(
    String? exame,
    String? timeStartStudy,
    String? timeEndStudy,
    String? firstTimeStudyInterval,
    String? secondTimeStudyInterval,
    String? thirtTimeStudyInterval,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateStudyPlan, [
              exame,
              timeStartStudy,
              timeEndStudy,
              firstTimeStudyInterval,
              secondTimeStudyInterval,
              thirtTimeStudyInterval,
            ]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
            returnValueForMissingStub:
                _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(
        Invocation.method(#update, [ids, condition]),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Disposer addListener(_i8.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListener, [listener]),
            returnValue: () {},
            returnValueForMissingStub: () {},
          )
          as _i8.Disposer);

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
    Invocation.method(#refreshGroup, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyChildrens() => super.noSuchMethod(
    Invocation.method(#notifyChildrens, []),
    returnValueForMissingStub: null,
  );

  @override
  void removeListenerId(Object? id, _i9.VoidCallback? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeListenerId, [id, listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Disposer addListenerId(Object? key, _i8.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListenerId, [key, listener]),
            returnValue: () {},
            returnValueForMissingStub: () {},
          )
          as _i8.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
    Invocation.method(#disposeId, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void change(List<_i7.ConnectivityResult>? newState, {_i3.RxStatus? status}) =>
      super.noSuchMethod(
        Invocation.method(#change, [newState], {#status: status}),
        returnValueForMissingStub: null,
      );

  @override
  void append(
    _i4.Future<List<_i7.ConnectivityResult>> Function() Function()? body, {
    String? errorMessage,
  }) => super.noSuchMethod(
    Invocation.method(#append, [body], {#errorMessage: errorMessage}),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Connection].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnection extends _i1.Mock implements _i6.Connection {
  @override
  List<_i7.ConnectivityResult> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: <_i7.ConnectivityResult>[],
            returnValueForMissingStub: <_i7.ConnectivityResult>[],
          )
          as List<_i7.ConnectivityResult>);

  @override
  set connectionStatus(List<_i7.ConnectivityResult>? value) =>
      super.noSuchMethod(
        Invocation.setter(#connectionStatus, value),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> initializeConnection() =>
      (super.noSuchMethod(
            Invocation.method(#initializeConnection, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> initConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#initConnectivity, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
